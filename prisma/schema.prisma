// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  lastname  String
  email     String   @unique
  address   String?
  tel       String?
  password  String
  orders    Order[]
  createdAt DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  menus     Menu[]
  createdAt DateTime @default(now()) // Add createdAt field
}

model Discount {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  discount  Float
  menus     Menu[]
  createdAt DateTime @default(now()) // Add createdAt field
}

model Menu {
  id             Int             @id @default(autoincrement())
  name           String
  img            String?
  price          Float
  categoryId     Int
  discountId     Int? // Optional
  status         MenuStatus      @default(Draft)
  category       Category        @relation(fields: [categoryId], references: [id])
  discount       Discount?       @relation(fields: [discountId], references: [id])
  menusetDetails MenuSetDetail[]
  orderDetails   OrderDetail[]
  soldQuantity   Int             @default(0)
  createdAt      DateTime        @default(now()) // Add createdAt field
}

model Table {
  id        Int      @id @default(autoincrement())
  table_NO  Int      @unique
  status    String
  orders    Order[]
  createdAt DateTime @default(now()) // Add createdAt field
}

// สร้าง Enum สำหรับ status
enum MenuStatus {
  Draft
  Published
  Archived
}

model MenuSet {
  id           Int             @id @default(autoincrement())
  name         String
  totalMenu    Int
  price        Float
  status       MenuStatus      @default(Draft)
  details      MenuSetDetail[]
  OrderDetail  OrderDetail[]
  soldQuantity Int             @default(0)
  createdAt    DateTime        @default(now())
}

model MenuSetDetail {
  id        Int      @id @default(autoincrement())
  menusetId Int
  menuId    Int
  quantity  Int
  menuset   MenuSet  @relation(fields: [menusetId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now()) // Add createdAt field
}

model Employee {
  id          Int          @id @default(autoincrement())
  name        String
  lastname    String
  address     String?
  email       String       @unique
  password    String
  roleId      Int // Foreign key to Role model
  roles       Role         @relation(fields: [roleId], references: [id])
  attendances Attendance[]
  orders      Order[]
  shipping    Shipping[]
  createdAt   DateTime     @default(now())
}

model Role {
  id           Int        @id @default(autoincrement())
  name         String
  wagepermonth Int
  wageperday   Int
  employees    Employee[] // Use the plural form to reflect the one-to-many relationship
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId Int
  status     Boolean
  employee   Employee @relation(fields: [employeeId], references: [id])
  wages      Wages[]
  createdAt  DateTime @default(now())
}

model Wages {
  id           Int        @id @default(autoincrement())
  attendanceId Int
  amount       Float
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  createdAt    DateTime   @default(now()) // Add createdAt field
}

model Order_source {
  id          Int     @id @default(autoincrement())
  source_name String  @unique
  orders      Order[]
}

enum orderStatus {
  InQueue
  InProgress
  Finished
  Cancelled
}

model Order {
  id             Int           @id @default(autoincrement())
  customerId     Int?
  tableId        Int? // Optional
  employeeId     Int? // Optional
  order_sourceId Int
  status         orderStatus   @default(InQueue)
  quantity       Int
  totalPrice     Float
  customer       Customer?     @relation(fields: [customerId], references: [id])
  table          Table?        @relation(fields: [tableId], references: [id])
  employee       Employee?     @relation(fields: [employeeId], references: [id])
  orderSource    Order_source  @relation(fields: [order_sourceId], references: [id])
  orderDetails   OrderDetail[]
  payment        Payment?
  shipping       Shipping?
  createdAt      DateTime      @default(now()) // Add createdAt field
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  orderId   Int
  menuId    Int? // Optional
  menusetId Int? // Optional
  quantity  Int
  price     Float?
  order     Order    @relation(fields: [orderId], references: [id])
  menu      Menu?    @relation(fields: [menuId], references: [id])
  menuset   MenuSet? @relation(fields: [menusetId], references: [id])
  createdAt DateTime @default(now()) // Add createdAt field
}

enum PaymentMethod {
  Cash
  PayPal
}

enum paymentStatus {
  InComplete
  Completed
  Refunded
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  amount    Float
  method    PaymentMethod @default(PayPal)
  status    paymentStatus @default(InComplete)
  order     Order         @relation(fields: [orderId], references: [id])
  createdAt DateTime      @default(now())
}

enum ShippingStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

model Shipping {
  id         Int            @id @default(autoincrement())
  orderId    Int            @unique
  employeeId Int?
  status     ShippingStatus @default(Pending)
  order      Order          @relation(fields: [orderId], references: [id])
  employee   Employee?      @relation(fields: [employeeId], references: [id])
  createdAt  DateTime       @default(now()) // Add createdAt field
}

model Expense {
  id       Int        @id @default(autoincrement())
  category ExpenseCat
  amount   Float
  date     DateTime   @default(now())
}

enum ExpenseCat {
  wage
  food
}
